import os
import ast
import javalang
from pathlib import Path
import streamlit as st
from io import StringIO, BytesIO
from datetime import datetime
from markdown import markdown
from xhtml2pdf import pisa
import zipfile
import astor
from codigo_mejorado_ai import mejorar_codigo_con_docstrings

# ------------------------
# EXTRACCI√ìN Y AN√ÅLISIS
# ------------------------

def extract_python_classes_and_functions(code):
    tree = ast.parse(code)
    classes = []
    functions = []
    for node in ast.walk(tree):
        if isinstance(node, ast.FunctionDef):
            name = node.name
            docstring = ast.get_docstring(node) or "No docstring"
            functions.append((name, docstring, node))
        elif isinstance(node, ast.ClassDef):
            class_name = node.name
            methods = []
            for item in node.body:
                if isinstance(item, ast.FunctionDef):
                    method_name = item.name
                    doc = ast.get_docstring(item) or "No docstring"
                    methods.append((method_name, doc, item))
            classes.append((class_name, methods))
    return classes, functions

def extract_java_elements(code):
    classes = []
    try:
        tree = javalang.parse.parse(code)
        for _, node in tree.filter(javalang.tree.ClassDeclaration):
            class_name = node.name
            method_summaries = []
            for method in node.methods:
                method_name = method.name
                has_doc = bool(method.documentation)
                method_summaries.append((method_name, has_doc))
            classes.append((class_name, method_summaries))
    except:
        pass
    return classes

# ------------------------
# RES√öMENES Y M√âTRICAS
# ------------------------

def summarize_python_structure(py_classes, functions):
    parts = []
    if py_classes:
        parts.append(f"{len(py_classes)} clases: " + ", ".join([c[0] for c in py_classes]))
    if functions:
        parts.append(f"{len(functions)} funciones: " + ", ".join([f[0] for f in functions]))
    return "Archivo con " + "; ".join(parts) + "." if parts else "Archivo sin clases ni funciones."

def summarize_java_structure(classes):
    if not classes:
        return "No se encontraron clases Java en el archivo."
    resumen = f"Archivo con {len(classes)} clases detectadas:\n"
    for class_name, methods in classes:
        resumen += f"- Clase `{class_name}` con {len(methods)} m√©todos.\n"
    return resumen

def contar_lineas_codigo(code):
    return sum(1 for line in code.splitlines() if line.strip())

def obtener_m√©tricas_python(code, clases, functions):
    lineas = contar_lineas_codigo(code)
    total_clases = len(clases)
    total_funciones = len(functions)
    sin_docstring = sum(1 for _, doc, _ in functions if doc == "No docstring")
    sin_docstring += sum(1 for _, m√©todos in clases for _, doc, _ in m√©todos if doc == "No docstring")
    largos = sum(1 for _, m√©todos in clases for _, _, nodo in m√©todos if hasattr(nodo, 'body') and len(nodo.body) > 20)
    return {
        "üìÑ L√≠neas de c√≥digo": lineas,
        "üèõÔ∏è Clases": total_clases,
        "üõ†Ô∏è Funciones/M√©todos": total_funciones,
        "‚ö†Ô∏è Sin docstring": sin_docstring,
        "üìè M√©todos largos": largos,
    }

def obtener_m√©tricas_java(code, clases):
    lineas = contar_lineas_codigo(code)
    total_clases = len(clases)
    total_metodos = sum(len(metodos) for _, metodos in clases)
    sin_docstring = sum(1 for _, metodos in clases for _, tiene_doc in metodos if not tiene_doc)
    return {
        "üìÑ L√≠neas de c√≥digo": lineas,
        "üèõÔ∏è Clases": total_clases,
        "üõ†Ô∏è M√©todos": total_metodos,
        "‚ö†Ô∏è Sin documentaci√≥n": sin_docstring,
    }

# ------------------------
# DETECCI√ìN DE MALAS PR√ÅCTICAS Y SUGERENCIAS
# ------------------------

def detect_smells_python(py_classes, functions):
    issues = []
    for fname, docstring, node in functions:
        if docstring == "No docstring":
            issues.append(f"Funci√≥n `{fname}` sin docstring.")
    for cname, methods in py_classes:
        if len(methods) == 0:
            issues.append(f"Clase `{cname}` sin m√©todos.")
        for mname, doc, node in methods:
            if doc == "No docstring":
                issues.append(f"M√©todo `{mname}` en clase `{cname}` sin docstring.")
            if hasattr(node, 'body') and len(node.body) > 20:
                issues.append(f"M√©todo `{mname}` en clase `{cname}` es muy largo (>20 l√≠neas).")
    return issues

def detect_smells_java(java_classes):
    issues = []
    for class_name, methods in java_classes:
        if len(methods) == 0:
            issues.append(f"Clase `{class_name}` sin m√©todos.")
        for method_name, has_doc in methods:
            if not has_doc:
                issues.append(f"M√©todo `{method_name}` en clase `{class_name}` sin documentaci√≥n.")
    return issues

def sugerencias_mejoras(smells):
    mejoras = []
    for problema in smells:
        if "sin docstring" in problema or "sin documentaci√≥n" in problema:
            mejoras.append("‚úçÔ∏è A√±ade un docstring que explique la funcionalidad del m√©todo o funci√≥n.")
        elif "muy largo" in problema:
            mejoras.append("üîß Divide el m√©todo en varias funciones m√°s peque√±as para mejorar la legibilidad.")
        elif "sin m√©todos" in problema:
            mejoras.append("üìê Revisa si la clase necesita l√≥gica interna o puede ser convertida en una estructura de datos.")
        else:
            mejoras.append("üí° Revisa este fragmento para aplicar buenas pr√°cticas.")
    return list(set(mejoras))

# ------------------------
# EXPORTACI√ìN
# ------------------------

def generar_markdown(nombre_archivo, resumen, detalles, smells):
    md = StringIO()
    md.write(f"# Documentaci√≥n generada para `{nombre_archivo}`\n\n")
    md.write(f"**Fecha:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
    md.write(f"## üß† Resumen general\n{resumen}\n\n")
    md.write("## üîç Detalles\n")
    for bloque in detalles:
        md.write(bloque + "\n\n")
    if smells:
        md.write("## üö® Malas pr√°cticas detectadas\n")
        for smell in smells:
            md.write(f"- {smell}\n")
    return md.getvalue()

def convertir_pdf(md_text):
    html = markdown(md_text)
    pdf_bytes = BytesIO()
    pisa.CreatePDF(src=html, dest=pdf_bytes)
    return pdf_bytes.getvalue()


# ------------------------
# RES√öMENES NATURALES EN LENGUAJE NATURAL
# ------------------------

def generar_resumen_natural(nombre_archivo, extension, resumen, metricas, smells):
    partes = [f"üîé An√°lisis del archivo `{nombre_archivo}`:"]
    if extension == "py":
        clases = metricas.get("üèõÔ∏è Clases", 0)
        funcs = metricas.get("üõ†Ô∏è Funciones/M√©todos", 0)
        docstring_faltantes = metricas.get("‚ö†Ô∏è Sin docstring", 0)
        largos = metricas.get("üìè M√©todos largos", 0)
        partes.append(f"Este archivo contiene {clases} clases y {funcs} funciones o m√©todos.")
        if docstring_faltantes > 0:
            partes.append(f"Se detectaron {docstring_faltantes} funciones o m√©todos sin docstring.")
        if largos > 0:
            partes.append(f"Tambi√©n hay {largos} m√©todos que superan las 20 l√≠neas de longitud.")
        if not smells:
            partes.append("No se detectaron malas pr√°cticas evidentes.")
        else:
            partes.append("Se recomienda revisar el estilo y la documentaci√≥n de algunos elementos.")

    elif extension == "java":
        clases = metricas.get("üèõÔ∏è Clases", 0)
        metodos = metricas.get("üõ†Ô∏è M√©todos", 0)
        sin_docs = metricas.get("‚ö†Ô∏è Sin documentaci√≥n", 0)
        partes.append(f"Este archivo contiene {clases} clases con un total de {metodos} m√©todos.")
        if sin_docs > 0:
            partes.append(f"Se encontraron {sin_docs} m√©todos sin documentaci√≥n.")
        if not smells:
            partes.append("Todo parece estar bien documentado y estructurado.")
        else:
            partes.append("Ser√≠a conveniente documentar mejor algunos m√©todos.")

    return " ".join(partes)

# ------------------------
# STREAMLIT APP
# ------------------------

st.title("üß† Generador de Documentaci√≥n T√©cnica para C√≥digo Legacy")

uploaded_file = st.file_uploader("Sube un archivo (.py, .java o .zip)", type=["py", "java", "zip"])

if uploaded_file is not None:
    archivos = []

    if uploaded_file.name.endswith(".zip"):
        with zipfile.ZipFile(uploaded_file) as z:
            for file_info in z.infolist():
                if file_info.filename.endswith((".py", ".java")):
                    with z.open(file_info) as f:
                        code = f.read().decode("utf-8")
                        archivos.append((file_info.filename, code))
        if not archivos:
            st.warning("El archivo ZIP no contiene ning√∫n archivo .py ni .java v√°lido.")
            st.stop()
    else:
        code = uploaded_file.read().decode("utf-8")
        archivos.append((uploaded_file.name, code))

    for filename, code in archivos:
        st.divider()
        st.subheader(f"üìÅ Archivo: `{filename}`")
        extension = filename.split(".")[-1]
        st.code(code, language="java" if extension == "java" else "python")

        markdown_blocks = []
        smells = []

        if extension == "py":
            py_classes, functions = extract_python_classes_and_functions(code)
            summary = summarize_python_structure(py_classes, functions)
            st.text(summary)
            markdown_blocks.append(f"{summary}")

            st.subheader("üìä M√©tricas del archivo")
            metricas = obtener_m√©tricas_python(code, py_classes, functions)
            for clave, valor in metricas.items():
                st.markdown(f"**{clave}:** {valor}")
            if st.button(f"üìä Ver gr√°fico de m√©tricas ({filename})"):
                st.bar_chart(data={k: [v] for k, v in metricas.items()})

            st.subheader("üèõÔ∏è Clases y m√©todos detectados (Python)")
            for class_name, methods in py_classes:
                block = f"### Clase: `{class_name}`\n"
                st.markdown(f"### Clase: `{class_name}`")
                for method_name, docstring, _ in methods:
                    st.markdown(f"- M√©todo: `{method_name}` ‚Äî {docstring}")
                    block += f"- M√©todo: `{method_name}` ‚Äî {docstring}\n"
                markdown_blocks.append(block)

            st.subheader("üîç Funciones detectadas (Python)")
            block = ""
            for name, docstring, _ in functions:
                st.markdown(f"**Funci√≥n:** `{name}`")
                st.markdown(f"> {docstring}")
                block += f"**Funci√≥n:** `{name}`\n> {docstring}\n"
            markdown_blocks.append(block)

            smells = detect_smells_python(py_classes, functions)

            resumen_natural = generar_resumen_natural(filename, extension, summary, metricas, smells)
            st.subheader("üìù Resumen en lenguaje natural")
            st.markdown(resumen_natural)
            markdown_blocks.append(f"## üìù Resumen natural\n{resumen_natural}")

            if smells:
                st.subheader("üö® Malas pr√°cticas detectadas")
                for issue in smells:
                    st.markdown(f"<div style='color:crimson; font-weight:bold; margin-bottom:8px;'>‚ùó {issue}</div>", unsafe_allow_html=True)
                if st.button(f"üí° Sugerir mejoras autom√°ticas ({filename})"):
                    sugerencias = sugerencias_mejoras(smells)
                    st.markdown("### ‚úÖ Recomendaciones de mejora:")
                    for sug in sugerencias:
                        st.markdown(f"- {sug}")

                if st.button(f"‚ú® Generar versi√≥n mejorada del c√≥digo ({filename})"):
                    codigo_mejorado = mejorar_codigo_con_docstrings(code)
                    st.subheader("‚ú® C√≥digo mejorado autom√°ticamente")
                    st.code(codigo_mejorado, language="python")
                    st.download_button("‚¨áÔ∏è Descargar c√≥digo mejorado", codigo_mejorado, file_name=f"mejorado_{filename}")

        elif extension == "java":
            java_classes = extract_java_elements(code)
            summary = summarize_java_structure(java_classes)
            st.text(summary)
            markdown_blocks.append(f"{summary}")

            st.subheader("üìä M√©tricas del archivo")
            metricas = obtener_m√©tricas_java(code, java_classes)
            for clave, valor in metricas.items():
                st.markdown(f"**{clave}:** {valor}")
            if st.button(f"üìä Ver gr√°fico de m√©tricas ({filename})"):
                st.bar_chart(data={k: [v] for k, v in metricas.items()})

            st.subheader("üîç Clases y m√©todos detectados (Java)")
            for class_name, methods in java_classes:
                block = f"### Clase: `{class_name}`\n"
                st.markdown(f"### Clase: `{class_name}`")
                for method_name, _ in methods:
                    st.markdown(f"- M√©todo: `{method_name}`")
                    block += f"- M√©todo: `{method_name}`\n"
                markdown_blocks.append(block)

            smells = detect_smells_java(java_classes)

            resumen_natural = generar_resumen_natural(filename, extension, summary, metricas, smells)
            st.subheader("üìù Resumen en lenguaje natural")
            st.markdown(resumen_natural)
            markdown_blocks.append(f"## üìù Resumen natural\n{resumen_natural}")

            if smells:
                st.subheader("üö® Malas pr√°cticas detectadas")
                for issue in smells:
                    st.markdown(f"<div style='color:crimson; font-weight:bold; margin-bottom:8px;'>‚ùó {issue}</div>", unsafe_allow_html=True)
                if st.button(f"üí° Sugerir mejoras autom√°ticas ({filename})"):
                    sugerencias = sugerencias_mejoras(smells)
                    st.markdown("### ‚úÖ Recomendaciones de mejora:")
                    for sug in sugerencias:
                        st.markdown(f"- {sug}")
            else:
                st.markdown("<div style='color:green; font-weight:bold;'>‚úÖ No se han detectado malas pr√°cticas en este archivo.</div>", unsafe_allow_html=True)

        st.subheader("üì§ Exportar documentaci√≥n")
        markdown_text = generar_markdown(filename, summary, markdown_blocks, smells)
        st.download_button("üìÑ Descargar como Markdown", markdown_text.encode("utf-8"), file_name=f"{filename}.md")
        pdf_file = convertir_pdf(markdown_text)
        st.download_button("üìÑ Descargar como PDF", pdf_file, file_name=f"{filename}.pdf")

        if "documentos_exportados" not in st.session_state:
            st.session_state["documentos_exportados"] = []
        st.session_state["documentos_exportados"].append((filename, markdown_text, pdf_file))

if st.session_state.get("documentos_exportados"):
    st.divider()
    st.subheader("üì¶ Descargar toda la documentaci√≥n como ZIP")

    zip_buffer = BytesIO()
    with zipfile.ZipFile(zip_buffer, "w") as zipf:
        for fname, md, pdf in st.session_state["documentos_exportados"]:
            zipf.writestr(f"{fname}.md", md)
            zipf.writestr(f"{fname}.pdf", pdf)

    st.download_button(
        "üì• Descargar ZIP completo",
        zip_buffer.getvalue(),
        file_name="documentacion_completa.zip",
        mime="application/zip"
    )
